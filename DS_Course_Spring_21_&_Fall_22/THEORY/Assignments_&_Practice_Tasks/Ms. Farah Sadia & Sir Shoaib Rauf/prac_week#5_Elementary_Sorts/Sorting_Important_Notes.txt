1) Bubble Sort:-
Approach:
- Compare adjacent elements (i.e. 'ith' with 'ith+1' index element) & swap them one by one if they are in wrong order
- Continue this process until all elements are sorted in same order.

Important Notes:
- Bubble sort works like selection sort, but its cost is explicit in this representation because it uses
  exchanges (data movement) to move the minimum element from right to left, one position at a time. 
- Not suitable for large data sets as its average and worst-case time complexity is quite high i.e. O(N^2)
- It takes minimum time i.e. O(N) when elements are already sorted.

Dry Run (in ascending order) {i =>outer loop, j =>inner loop}:
i = 0) [-2, 45, 0, 11, -9] {initial-state =>unsorted}
i = 1) [-2, 0, 11, -9, 45] (j=0: -2<45 =>no swap, j=1: 45>0 =>swap, j=2: 45>11 =>swap, j=3: 45>-9 =>swap)
i = 2) [-2, 0, -9, 11, 45] (j=0: -2<0 =>no swap, j=1: 0<11 =>no swap, j=2: 11>-9 =>swap)
i = 3) [-2, -9, 0, 11, 45] (j=0: -2<0 =>no swap, j=1: 0>-9 =>swap)
i = 4) [-9, -2, 0, 11, 45] (j=0: -2<-9 =>swap) {final-state =>sorted}


2) Selection Sort:-
Approach:
- Find the smallest element in the array and exchange it with the element in the first position.
- Find the second smallest element in the array and exchange it with the element in the second position.
- Continue this process until done.

Important Notes:
- Method requires O(N^2) comparisons and so it should only be used on small files.
- When sorting files with large records and small keys, the cost of exchanging records controls the running time.
- In such cases, selection sort requires O(N) time since the number of exchanges is at most N.

Dry Run (in ascending order) {i =>outer loop, j =>inner loop}:
i = 0) [20, 12, 10, 15, 2] {initial-state =>unsorted}
i = 1) [2, 12, 10, 15, 20] (j=0: 20<12 =>min_index=1, j=1: 12<10 =>min_index=2, j=2: 10<15 =>min_index=2, j=3: 10<2 =>min_index=4; swap i=0 with min_index=4)
i = 2) [2, 10, 12, 15, 20] (j=1: 12<10 =>min_index=2, j=2: 10<15 =>min_index=2, j=3: 10<20 =>min_index=2; swap i=1 with min_index=2)
i = 3) [2, 10, 12, 15, 20] (j=2: 12<15 =>min_index=2, j=3: 12<20 =>min_index=2; no swap needed =>i=min_index=2)
i = 4) [-9, -2, 0, 11, 45] (j=3: 15<20 =>min_index=3; no swap needed =>i=min_index=3) {final-state =>sorted}


3) Insertion Sort:-
Approach:
- Choose the second element in the array and place it in order with respect to the first element.
- Choose the third element in the array and place it in order with respect to the first two elements.
- Continue this process until done.

Important Notes:
- Insertion sort is an O(N^2) method both in the average case and in the worst case.
- However, in the special case of an almost sorted file, insertion sort requires only linear time.
- To get rid of bound check in while loop, we can place "sentinel key" in array[0] (as it's more efficient),
  making it at least as small as the smallest element in the array.

Dry Run (in ascending order) {i =>outer loop, j =>inner loop}:
i = 0) [9, 5, 1, 4, 3] {initial-state =>unsorted}
i = 1) [5, 9, 1, 4, 3] (set key as i=1:5; j=0: 9>key =>copy 9 to 5; set i=0 as key=5)
i = 2) [1, 5, 9, 4, 3] (set key as i=2:1; j=1: 9>key =>copy 9 to 1,j=0: 5>key =>copy 5 to 9; set i=0 as key=1)
i = 3) [1, 4, 5, 9, 3] (set key as i=3:4; j=2: 9>key =>copy 9 to 4, j=1: 5>key =>copy 5 to 9; set i=1 as key=4)
i = 4) [1, 3, 4, 5, 9] (set key as i=4:3; j=3: 9>key =>copy 9 to 3, j=2: 5>key =>copy 5 to 9, j=1: 4>key =>copy 4 to 5; set i=1 as key=3) {final-state =>sorted}


4) Shell Sort:-
Approach:
- Choose an initial large step size, hK, and use insertion sort to produce an h(K) sorted file.
- Choose a smaller step size, h(K-1), and use insertion sort to produce an h(K-1) sorted file, 
  using the h(K) sorted file as input.
- Continue this process until done. The last stage uses insertion sort, with a step size h(1)=1,
  to produce a sorted file.

Important Notes:
- input files with more order to them require a smaller number of exchanges.
- It is important to choose a good sequence of increments.
- A commonly used sequence is (3K-1)/2,...,121,40,13,4,1, which is obtained from the recurrence h(k)=3h(k+1)+1.
- Sequence obtained by taking powers of 2 leads to bad performance because elements in odd positions
  are not compared with elements in even positions until the end.

